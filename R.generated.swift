//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 2 files.
  struct file {
    /// Resource file `TestJSON.json`.
    static let testJSONJson = Rswift.FileResource(bundle: R.hostingBundle, name: "TestJSON", pathExtension: "json")
    /// Resource file `oreos.ttf`.
    static let oreosTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "oreos", pathExtension: "ttf")
    
    /// `bundle.url(forResource: "TestJSON", withExtension: "json")`
    static func testJSONJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.testJSONJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "oreos", withExtension: "ttf")`
    static func oreosTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.oreosTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 1 fonts.
  struct font: Rswift.Validatable {
    /// Font `Oreosoutline`.
    static let oreosoutline = Rswift.FontResource(fontName: "Oreosoutline")
    
    /// `UIFont(name: "Oreosoutline", size: ...)`
    static func oreosoutline(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: oreosoutline, size: size)
    }
    
    static func validate() throws {
      if R.font.oreosoutline(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Oreosoutline' could not be loaded, is 'oreos.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 1 images.
  struct image {
    /// Image `icon_star`.
    static let icon_star = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_star")
    
    /// `UIImage(named: "icon_star", bundle: ..., traitCollection: ...)`
    static func icon_star(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_star, compatibleWith: traitCollection)
    }
    
    /// This `R.image.bg` struct is generated, and contains static references to 1 images.
    struct bg {
      /// Image `line_bg`.
      static let line_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg/line_bg")
      
      /// `UIImage(named: "line_bg", bundle: ..., traitCollection: ...)`
      static func line_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.bg.line_bg, compatibleWith: traitCollection)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 5 nibs.
  struct nib {
    /// Nib `ExtView`.
    static let extView = _R.nib._ExtView()
    /// Nib `FontViewController`.
    static let fontViewController = _R.nib._FontViewController()
    /// Nib `JSONViewController`.
    static let jsonViewController = _R.nib._JSONViewController()
    /// Nib `MoreViewController`.
    static let moreViewController = _R.nib._MoreViewController()
    /// Nib `RImageViewController`.
    static let rImageViewController = _R.nib._RImageViewController()
    
    /// `UINib(name: "ExtView", in: bundle)`
    static func extView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.extView)
    }
    
    /// `UINib(name: "FontViewController", in: bundle)`
    static func fontViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.fontViewController)
    }
    
    /// `UINib(name: "JSONViewController", in: bundle)`
    static func jsonViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.jsonViewController)
    }
    
    /// `UINib(name: "MoreViewController", in: bundle)`
    static func moreViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.moreViewController)
    }
    
    /// `UINib(name: "RImageViewController", in: bundle)`
    static func rImageViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.rImageViewController)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 1 view controllers.
  struct segue {
    /// This struct is generated for `ViewController`, and contains static references to 1 segues.
    struct viewController {
      /// Segue identifier `open`.
      static let `open`: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ViewController, UIKit.UIViewController> = Rswift.StoryboardSegueIdentifier(identifier: "open")
      
      /// Optionally returns a typed version of segue `open`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func `open`(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ViewController, UIKit.UIViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.viewController.`open`, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R {
  struct nib {
    struct _ExtView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ExtView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ExtView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ExtView
      }
      
      fileprivate init() {}
    }
    
    struct _FontViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "FontViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _JSONViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "JSONViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _MoreViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MoreViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _RImageViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "RImageViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard {
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
